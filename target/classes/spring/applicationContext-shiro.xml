<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">
		
		<!-- Shiro的web过滤器 -->
		<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
			<property name="securityManager" ref="securityManager"></property>
			<!-- loginUrl认证提交地址，即如果没有认证的用户，将会请求这里配置的地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
			<property name="loginUrl" value="/login.action"></property>
			<!-- 通过unauthorizedUrl指定当认证不通过（或没有权限）后要跳转的拒绝页面的地址 -->
			<property name="unauthorizedUrl" value="/refuse.jsp"></property>
			<!-- 自定义filter配置 -->
			<property name="filters" >
				<map>
					<!-- 原本authc默认表示使用FormAuthenticationFilter，
					这样配置后，authc就表示使用自定义的CustomFormAuthenticationFilter -->
					<entry key="authc" value-ref="formAuthenticationFilter"></entry>
				</map>
			</property>
			<!-- 过滤器链 从上向下执行，一般将/**放在最下边 -->
			<property name="filterChainDefinitions">
				<value>
					<!-- 这种方法有个弊端，就是需要把所有的url都进行配置。
					今后使用注解的方式，对类的方法进行注解授权，建议对controler类的方法进行注解-->
					
					<!-- 对静态资源设置可以匿名访问 -->
					/images/** = anon
					/js/** = anon
					/styles/** = anon
					/validatecode.jsp = anon				
					<!-- 请求logout。action地址，shiro去清除session -->
					/logout.action = logout
					
					<!-- 商品查询需要商品查询的权限 -->
					<!-- /items/queryItems.action = perms[item:query] -->
					<!-- /items/editItems.action = perms[item:edit] -->
					<!-- 通过记住我认证通过即可访问的路径 -->
					/index.jsp = user
					/first.action = user
					/welcome.jsp = user
					
					
					<!-- 所有的url都必须认证通过才可以访问 -->
					/** = authc

					<!-- 所有url都可以匿名访问 -->
				</value>
			</property>
			
		</bean>
		
		
		<!-- 自定义form认证过滤器,要注入到上述  shiro的web过滤器中 -->
		<bean id="formAuthenticationFilter" class="cn.itcast.ssm.shiro.CustomFormAuthenticationFilter">
			<!-- 表单中账号标签的input名称 -->
			<property name="usernameParam" value="username"/>
			<!-- 表单中密码标签的input名称 -->
			<property name="passwordParam" value="password"/>		
		</bean>
		
		
		<!-- 安全管理器 securityManager -->
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
			<!-- 注入自定义realm -->
			<property name="realm" ref="customRealm"></property>
			<!-- 注入缓存管理器 -->
			<property name="cacheManager" ref="cacheManager"></property>
			<!-- 注入会话管理器 -->
			<property name="sessionManager" ref="sessionManager"></property>
			<!-- 注入记住我管理器 -->
			<property name="rememberMeManager" ref="rememberMeManager"></property>
		</bean>
		
		<!-- 缓存管理器 cacheManager-->
		<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
			<property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"></property>
		</bean>
		
		<!-- 会话管理器 sessionManager-->
		<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
			<!-- sessionde 失效时长，单位毫秒 -->
			<!-- 登陆后，在此时间内刷新页面，不用重新登陆，超过此时间，再刷新页面就需要重新登陆 -->
			<property name="globalSessionTimeout" value="600000"/>
			<!-- 删除失效session -->
			<property name="deleteInvalidSessions" value="true"/>
		</bean>
		
		<!-- 记住我管理器（cookie管理器）rememberMeManager -->
		<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
			<property name="cookie" ref="rememberMeCookie"/>
		</bean>
		<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
			<!-- 配置cookie的名字 -->
			<constructor-arg value="rememberMe"/>
			<!-- cookie生效时间30天 -->
			<property name="maxAge" value="2592000"/>
		</bean>
		
		<!-- 自定义realm -->
		<bean id="customRealm" class="cn.itcast.ssm.shiro.CustomRealm">
			<!-- 将凭证匹配其设置到realm中 -->
			<property name="credentialsMatcher" ref="credentialsMatcher"></property>
		</bean>
		
		<!-- 凭证匹配器：指定shiro在对比输入的密码和数据库中的密码时对输入的密码进行何种散列算法及散列次数 -->
		<bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
			<property name="hashAlgorithmName" value="md5"/>
			<property name="hashIterations" value="1"/>		
		</bean>
		
</beans>